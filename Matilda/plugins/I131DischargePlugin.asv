classdef I131DischargePlugin < DoseAppPluginBase
    properties (Access = private)
        App
        Parent
        DateTimePicker
        ActivityField
        LimitField
        MeasuresTable
        AddButton
        StdButton
        ComputeButton
        ResultLabel
        Axes
    end

    methods
        function name = pluginName(~)
            name = "Dimissione I-131";
        end

        function init(obj, app, parent)
            obj.App = app;
            obj.Parent = parent;

            gl = uigridlayout(parent, [9 2]);
            gl.RowHeight = {'fit','fit','fit','fit','fit','fit','fit','fit','1x'};
            gl.ColumnWidth = {'fit','1x'};

            % Data e ora somministrazione
            uilabel(gl, "Text", "Data e ora somministrazione:");
            obj.DateTimePicker = uidatetimepicker(gl, 'Value', datetime('now','Format','dd-MMM-yyyy HH:mm'), ...
                'DisplayFormat', 'dd-MMM-yyyy HH:mm');
            obj.DateTimePicker.Layout.Column = 2;

            % Attività somministrata
            uilabel(gl, "Text", "Attività somministrata (MBq):");
            obj.ActivityField = uieditfield(gl, 'numeric', 'Value', 600);
            obj.ActivityField.Layout.Column = 2;

            % Limite dose rate (µSv/h) [default 12]
            uilabel(gl, "Text", "Limite rateo (µSv/h) a 2m:");
            obj.LimitField = uieditfield(gl, 'numeric', 'Value', 12);
            obj.LimitField.Layout.Column = 2;

            % Bottone "Aggiungi misure standard"
            uilabel(gl, "Text", "Misure [ore, µSv/h] a 2m:");
            obj.StdButton = uibutton(gl, "Text", "Aggiungi misure standard", ...
                'ButtonPushedFcn', @(~,~) obj.addStandardRows());
            obj.StdButton.Layout.Row = 4; obj.StdButton.Layout.Column = 2;

            % Tabella misure
            obj.MeasuresTable = uitable(gl, ...
                'Data', nan(1,3), ...
                'ColumnName', {'Ore dalla somm.', 'Rateo (µSv/h)', 'Data/Ora'}, ...
                'ColumnEditable', [true true false], ...
                'CellEditCallback', @(~,~) obj.updateDateCol());
            obj.MeasuresTable.Layout.Row = 5; obj.MeasuresTable.Layout.Column = [1 2];

            % Bottone "+"
            obj.AddButton = uibutton(gl, "Text", "+", ...
                'ButtonPushedFcn', @(~,~) obj.addRow());
            obj.AddButton.Layout.Row = 6; obj.AddButton.Layout.Column = 2;

            % Bottone calcola
            obj.ComputeButton = uibutton(gl, "Text", "Stima dimissione", ...
                'ButtonPushedFcn', @(~,~) obj.computeDischarge());
            obj.ComputeButton.Layout.Row = 7; obj.ComputeButton.Layout.Column = 1;

            % Output risultato
            obj.ResultLabel = uilabel(gl, "Text", "");
            obj.ResultLabel.Layout.Row = 7; obj.ResultLabel.Layout.Column = 2;

            % Grafico
            obj.Axes = uiaxes(gl);
            obj.Axes.Layout.Row = 9; obj.Axes.Layout.Column = [1 2];
            title(obj.Axes, 'Curva decadimento rateo I-131 a 2m');
            xlabel(obj.Axes, 'Ore dalla somministrazione');
            ylabel(obj.Axes, 'Rateo (µSv/h)');

            obj.updateDateCol();
        end

        function addRow(obj)
            data = obj.MeasuresTable.Data;
            n = size(data,1);
            if n < 1
                data = nan(1,3);
            else
                data = [data; nan(1,3)];
            end
            obj.MeasuresTable.Data = data;
            obj.updateDateCol();
        end

        function addStandardRows(obj)
            % Orari clinici tipici per I-131, scalati rispetto a somministrazione
            t0 = obj.DateTimePicker.Value;
            stdTimes = [
                0                   % Somministrazione
                2                   % +2h
                hours(datetime([year(t0+days(1)), month(t0+days(1)), day(t0+days(1)), 8, 0, 0]) - t0)
                hours(datetime([year(t0+days(1)), month(t0+days(1)), day(t0+days(1)), 16, 0, 0]) - t0)
                hours(datetime([year(t0+days(2)), month(t0+days(2)), day(t0+days(2)), 8, 0, 0]) - t0)
                hours(datetime([year(t0+days(2)), month(t0+days(2)), day(t0+days(2)), 16, 0, 0]) - t0)
            ];
            n = numel(stdTimes);
            data = nan(n,3);
            data(:,1) = stdTimes;
            for i = 1:n
                data(i,3) = string(datestr(t0 + hours(stdTimes(i)),'dd-mmm-yyyy HH:MM'));
            end
            obj.MeasuresTable.Data = data;
            obj.updateDateCol();
        end

        function updateDateCol(obj)
            % Aggiorna la colonna data/ora in base alla colonna "ore dalla somm."
            data = obj.MeasuresTable.Data;
            t0 = obj.DateTimePicker.Value;
            for i = 1:size(data,1)
                t = data(i,1);
                if isnan(t)
                    data(i,3) = "";
                else
                    data(i,3) = string(datestr(t0 + hours(t),'dd-mmm-yyyy HH:MM'));
                end
            end
            obj.MeasuresTable.Data = data;
            obj.updatePlot();
        end

        function updatePlot(obj)
            data = obj.MeasuresTable.Data;
            t = data(:,1); y = data(:,2);
            valid = ~isnan(t) & ~isnan(y) & y>0 & t>=0;
            t = t(valid); y = y(valid);
            cla(obj.Axes);
            if isempty(t), return; end

            scatter(obj.Axes, t, y, 60, 'filled', 'DisplayName', 'Misure');
            hold(obj.Axes,'on');

            % Fit mono-esponenziale (se almeno 2 punti)
            if numel(t) >= 2
                % Usa fitnlm (no toolbox curve fitting)
                fexp = @(b,x) b(1)*exp(-b(2)*x);
                beta0 = [max(y), 0.1];
                mdl = fitnlm(t, y, fexp, beta0);
                tt = linspace(0, max([t; 96]), 100);
                yy = fexp(mdl.Coefficients.Estimate', tt);
                plot(obj.Axes, tt, yy, 'r-', 'DisplayName', 'Fit exp');
            end

            % Soglia
            yline(obj.Axes, obj.LimitField.Value, '--k', sprintf('Soglia %.1f', obj.LimitField.Value));
            hold(obj.Axes,'off');
            legend(obj.Axes, 'show');
        end

        function computeDischarge(obj)
            data = obj.MeasuresTable.Data;
            t = data(:,1); y = data(:,2);
            valid = ~isnan(t) & ~isnan(y) & y>0 & t>=0;
            t = t(valid); y = y(valid);
            if numel(t)<2
                obj.ResultLabel.Text = "Inserire almeno 2 misure!";
                return;
            end

            % Fit mono-esponenziale (robusto)
            fexp = @(b,x) b(1)*exp(-b(2)*x);
            beta0 = [max(y), 0.1];
            mdl = fitnlm(t, y, fexp, beta0);
            a = mdl.Coefficients.Estimate(1);
            lambda = mdl.Coefficients.Estimate(2);

            soglia = obj.LimitField.Value;
            if a <= soglia
                obj.ResultLabel.Text = "Già dimissibile!";
                return;
            end
            tstar = log(a/soglia)/lambda;
            t0 = obj.DateTimePicker.Value;
            tstarAbs = t0 + hours(tstar);

            obj.ResultLabel.Text = sprintf('Dimissibile tra %.1f h\n(%s)', tstar, datestr(tstarAbs,'dd-mmm-yyyy HH:MM'));

            % Aggiorna plot e segnalazione punto dimissibilità
            obj.updatePlot();
            hold(obj.Axes,'on');
            plot(obj.Axes, [tstar tstar], [0 soglia], 'g--', 'LineWidth',2, 'DisplayName','T* dimissibilità');
            scatter(obj.Axes, tstar, soglia, 80, 'g','filled');
            hold(obj.Axes,'off');
        end
    end
end
